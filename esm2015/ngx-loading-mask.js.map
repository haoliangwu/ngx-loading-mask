{
  "version": 3,
  "file": "ngx-loading-mask.js",
  "sources": [
    "ng://ngx-loading-mask/src/app/loading-mask/loading-mask.module.ts",
    "ng://ngx-loading-mask/src/app/loading-mask/loading-mask.interceptor.ts",
    "ng://ngx-loading-mask/src/app/loading-mask/loading-snip.component.ts",
    "ng://ngx-loading-mask/src/app/loading-mask/loading-mask.directive.ts",
    "ng://ngx-loading-mask/src/app/loading-mask/utils/log.ts",
    "ng://ngx-loading-mask/src/app/loading-mask/loading-mask.service.ts",
    "ng://ngx-loading-mask/src/app/loading-mask/model/event.ts",
    "ng://ngx-loading-mask/src/app/loading-mask/config.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { LoadingSnipComponent } from './loading-snip.component'\nimport { LoadingMaskDirective } from './loading-mask.directive'\nimport { Config } from './model/config'\nimport { CONFIG } from './config'\nimport { LoadingMaskService } from './loading-mask.service'\nimport { HTTP_INTERCEPTORS } from '@angular/common/http'\nimport { LoadingMaskInterceptor } from './loading-mask.interceptor'\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    LoadingSnipComponent,\n    LoadingMaskDirective\n  ],\n  exports: [\n    LoadingMaskDirective\n  ],\n  entryComponents: [\n    LoadingSnipComponent\n  ]\n})\nexport class LoadingMaskModule {\n  static forRoot(config: Config): ModuleWithProviders {\n    return {\n      ngModule: LoadingMaskModule,\n      providers: [\n        LoadingMaskService,\n        {\n          useValue: config,\n          provide: CONFIG\n        },\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: LoadingMaskInterceptor,\n          multi: true,\n        }\n      ]\n    }\n  }\n}\n",
    "import { Injectable } from '@angular/core'\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http'\n\nimport { Observable } from 'rxjs/Observable'\nimport { LoadingMaskService } from './loading-mask.service'\nimport { tap } from 'rxjs/operators'\nimport { LOADING_MASK_HEADER } from './config'\n\n@Injectable()\nexport class LoadingMaskInterceptor implements HttpInterceptor {\n  constructor(\n    private service: LoadingMaskService\n  ) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (req.headers.has(LOADING_MASK_HEADER)) {\n      // TODO use custom header as custom metadata, maybe deprecated in the future\n      // refer to https://github.com/angular/angular/issues/18155\n      const groupName = req.headers.get(LOADING_MASK_HEADER)\n\n      req = req.clone({\n        headers: req.headers.delete(LOADING_MASK_HEADER)\n      })\n\n      this.service.showGroup(groupName)\n\n      return next.handle(req).pipe(\n        tap(event => {\n          if (event instanceof HttpResponse) {\n            // TODO hide mask here\n            this.service.hideGroup(groupName)\n          }\n        }, error => {\n          if (error instanceof HttpErrorResponse) {\n            // TODO hide mask with error here\n            this.service.hideGroupError(groupName, error)\n          }\n        })\n      )\n    } else {\n      return next.handle(req)\n    }\n  }\n}\n",
    "import { Component, OnInit, Inject, ViewEncapsulation } from '@angular/core'\nimport { ClsMapping, Config } from './model/config'\nimport { CONFIG, DEFAULT_CONFIG } from './config'\nimport { LoadingMaskDirective } from './loading-mask.directive'\n\n@Component({\n  selector: 'ngx-loading-snip',\n  encapsulation: ViewEncapsulation.None,\n  template: `<div class=\"loading-mask-base\" [ngClass]=\"maskCls\" [ngStyle]=\"maskStyle\">\n  <div class=\"loading-snip-base\" [ngClass]=\"snipCls\">\n    <img *ngIf=\"!mask.maskTplRef\" [attr.src]=\"imgUrl\" [ngStyle]=\"snipStyle\"/>\n    <ng-container *ngIf=\"mask.maskTplRef\">\n        <ng-container *ngTemplateOutlet=\"mask.maskTplRef\">\n        </ng-container>\n      </ng-container>\n  </div>\n</div>\n`,\n  styles: [`.loading-mask-base {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  z-index: 99; }\n  .loading-mask-base.global {\n    position: fixed;\n    width: 100vw;\n    height: 100vh; }\n\n.loading-snip-base {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%); }\n`]\n})\nexport class LoadingSnipComponent implements OnInit {\n  private cls: ClsMapping\n\n  imgUrl: string\n  size: number\n  bgColor: string\n\n  get maskCls() {\n    return [this.cls.mask, this.mask.isDefault ? 'global' : '']\n  }\n\n  get maskStyle() {\n    return {\n      'background': this.bgColor\n    }\n  }\n\n  get snipCls() {\n    return this.cls.snip\n  }\n\n  get snipStyle() {\n    return {\n      'width.px': this.size,\n      'height.px': this.size\n    }\n  }\n\n  constructor(\n    @Inject(CONFIG) private config: Config,\n    public mask: LoadingMaskDirective\n  ) { }\n\n  ngOnInit() {\n    this.config = Object.assign(DEFAULT_CONFIG, this.config)\n\n    this.cls = this.config.clsMapping\n    this.imgUrl = this.config.snippet.imgUrl\n    this.size = this.config.snippet.size\n    this.bgColor = this.config.mask.bgColor\n  }\n}\n",
    "import { Directive, Input, ComponentFactoryResolver, ApplicationRef, Injector, Host, ElementRef, Inject, ContentChild, TemplateRef } from '@angular/core'\nimport { LoadingMaskService } from './loading-mask.service'\nimport { OnInit, OnDestroy } from '@angular/core/src/metadata/lifecycle_hooks'\nimport { Subscription } from 'rxjs/Subscription'\nimport { Observable } from 'rxjs/Observable'\nimport { LoadingEvent, LoadingStatus } from './model/event'\nimport { LoadingMaskGroup } from './model/mask'\n\nimport { ComponentPortal, DomPortalHost } from '@angular/cdk/portal'\nimport { LoadingSnipComponent } from './loading-snip.component'\nimport { catchError, tap, flatMap } from 'rxjs/operators'\nimport { of } from 'rxjs/observable/of'\nimport { empty } from 'rxjs/observable/empty'\nimport { Config } from './model/config'\nimport { CONFIG, DEFAULT_CONFIG } from './config'\nimport { logGroupStatus } from './utils/log'\n\n@Directive({\n  selector: '[ngxLoadingMask]',\n  exportAs: 'mask'\n})\nexport class LoadingMaskDirective implements OnInit, OnDestroy {\n  @Input() public ngxLoadingMask: string\n  public isDefault = false\n  @ContentChild('mask') public maskTplRef: TemplateRef<any>\n\n  private loadingEvent$: Observable<LoadingEvent>\n  private subscription: Subscription\n  private group: LoadingMaskGroup\n\n  private loadingSnipPortal: ComponentPortal<LoadingSnipComponent>\n  private portalHost: DomPortalHost\n  private portalHostEl: HTMLElement\n\n  constructor(\n    @Inject(CONFIG) private config: Config,\n    private service: LoadingMaskService,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private appRef: ApplicationRef,\n    private injector: Injector,\n    @Host() private el: ElementRef\n  ) { }\n\n  ngOnInit() {\n    this.group = this.service.register(this.ngxLoadingMask)\n\n    this.config = Object.assign(DEFAULT_CONFIG, this.config)\n\n    this.service.preloadImage()\n\n    const { id } = this.group\n\n    this.isDefault = this.service.isDefaultGroup(id)\n    this.loadingEvent$ = this.service.subscribe(id)\n\n    this.loadingSnipPortal = new ComponentPortal(LoadingSnipComponent)\n    this.portalHostEl = this.service.isDefaultGroup(id) ? document.body : this.el.nativeElement\n\n    this.portalHost = new DomPortalHost(\n      this.portalHostEl,\n      this.componentFactoryResolver,\n      this.appRef,\n      this.injector)\n\n    this.subscription = this.loadingEvent$.pipe(\n      flatMap(e => {\n        return of(e).pipe(\n          tap(t => this.handleEvent(t)),\n          catchError((err, source) => {\n            console.error(err)\n            return empty()\n          })\n        )\n      }))\n      .subscribe()\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe()\n  }\n\n  private handleEvent(e: LoadingEvent) {\n    switch (e.status) {\n      case LoadingStatus.PENDING:\n        this.group.pending++\n        if (this.group.isError) this.group.isError = false\n\n        if (this.config.debug) {\n          logGroupStatus(this.group, LoadingStatus.PENDING)\n        }\n\n        if (this.portalHost.hasAttached()) return\n        else this.reveal()\n\n        break\n      case LoadingStatus.DONE:\n        this.group.done++\n\n        if (this.config.debug) {\n          logGroupStatus(this.group, LoadingStatus.DONE)\n        }\n\n        if (this.service.isDoneGroup(this.group)) {\n          this.group.done = 0\n          this.group.pending = 0\n\n          this.hide()\n        }\n\n        break\n      case LoadingStatus.ERROR:\n        this.group.done = 0\n        this.group.pending = 0\n\n        this.group.isError = true\n\n        if (this.config.debug) {\n          logGroupStatus(this.group, LoadingStatus.ERROR)\n        }\n\n        this.hideError(e.data)\n\n        break\n    }\n  }\n\n  reveal() {\n    // TODO track https://github.com/angular/material2/issues/8628\n    // this.portalHost.attachComponentPortal(this.loadingSnipPortal)\n    this.portalHost.attach(this.loadingSnipPortal)\n  }\n\n  hide() {\n    this.portalHost.detach()\n  }\n\n  hideError(error: any) {\n    this.hide()\n\n    throw new Error(error)\n  }\n}\n",
    "import { LoadingMaskGroup } from '../model/mask'\nimport { LoadingStatus } from '../model/event'\n\nexport const logGroupStatus = function (group: LoadingMaskGroup, status: LoadingStatus) {\n  console.group(`group %s is ${status}`, group.id)\n  console.log(group)\n  console.groupEnd()\n}\n",
    "import { Injectable, Inject } from '@angular/core'\nimport { LoadingMaskGroupMap, LoadingMaskGroup } from './model/mask'\n\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject'\nimport { LoadingEvent, LoadingStatus } from './model/event'\nimport { Observable } from 'rxjs/Observable'\nimport { filter } from 'rxjs/operators'\nimport { Config } from './model/config'\nimport { CONFIG, DEFAULT_MASK_GROUP } from './config'\n\n@Injectable()\nexport class LoadingMaskService {\n  private isSnipPreload = false\n  private uuid = 1\n  private maskGroupMap: LoadingMaskGroupMap\n\n  private loadingEvent$ = new BehaviorSubject<LoadingEvent>({\n    id: '__init__',\n    status: LoadingStatus.INIT\n  })\n\n  constructor(\n    @Inject(CONFIG) private config: Config\n  ) {\n    this.bootstrap()\n  }\n\n  subscribe(groupName?: string): Observable<LoadingEvent> {\n    if (!!groupName) {\n      return this.loadingEvent$.pipe(\n        filter(e => e.id === groupName)\n      )\n    } else {\n      return this.loadingEvent$.asObservable()\n    }\n  }\n\n  /*\n   * register group instance\n   */\n  register(groupName: string = DEFAULT_MASK_GROUP, replace = false): LoadingMaskGroup {\n    if (groupName.length === 0) {\n      groupName = DEFAULT_MASK_GROUP\n    }\n\n    let group: LoadingMaskGroup\n\n    if (this.isDefaultGroup(groupName)) {\n      group = this.getGroup(groupName, true)\n    } else {\n      group = this.setGroup(groupName, replace)\n    }\n\n    return group\n  }\n\n  /*\n   * unregister group instance\n   */\n  unregister(groupName: string): void {\n    if (this.isDefaultGroup(groupName)) {\n      throw new Error('cannot unregister default loading mask group')\n    }\n\n    if (!this.maskGroupMap.has(groupName)) {\n      throw new Error('cannot unregister non-existed loading mask group')\n    }\n\n    const group = this.getGroup(groupName)\n\n    group.instances--\n\n    if (group.instances === 0) {\n      this.maskGroupMap.delete(groupName)\n    }\n  }\n\n  /*\n   * if groupName is default group name\n   */\n  isDefaultGroup(groupName: string): boolean {\n    return groupName === DEFAULT_MASK_GROUP\n  }\n\n  /*\n   * if group has been done status\n   */\n  isDoneGroup(group: LoadingMaskGroup): boolean {\n    return group.done === group.pending\n  }\n\n  /*\n   * get group instance of groupName\n   * if don't existed and safe = true, set new group instance with groupName and return it\n   */\n  getGroup(groupName: string, safe = false): LoadingMaskGroup {\n    if (this.maskGroupMap.has(groupName)) {\n      return this.maskGroupMap.get(groupName)\n    } else {\n      if (safe) {\n        return this.setGroup(groupName)\n      }\n    }\n  }\n\n  /*\n   * set group instance of groupName\n   * if replace = false, will return exited group instance with corresponding groupName\n   * otherwise, will replace current group instance with new one\n   */\n  setGroup(groupName: string, replace = false): LoadingMaskGroup {\n    let group: LoadingMaskGroup\n\n    if (!replace && this.maskGroupMap.has(groupName)) {\n      group = this.getGroup(groupName)\n    } else {\n      group = this.maskGroupFactory(groupName)\n      this.maskGroupMap.set(groupName, group)\n    }\n\n    group.instances++\n\n    return group\n  }\n\n  showGroup(groupName: string = DEFAULT_MASK_GROUP) {\n    this.loadingEvent$.next(this.loadingEventFactory(groupName, LoadingStatus.PENDING))\n  }\n\n  hideGroup(groupName: string = DEFAULT_MASK_GROUP) {\n    this.loadingEvent$.next(this.loadingEventFactory(groupName, LoadingStatus.DONE))\n  }\n\n  hideGroupError(groupName: string = DEFAULT_MASK_GROUP, error: any) {\n    this.loadingEvent$.next(this.loadingEventFactory(groupName, LoadingStatus.ERROR, error))\n  }\n\n  preloadImage() {\n    if (this.isSnipPreload) return\n\n    const { snippet: { imgUrl } } = this.config\n\n    console.group('starting preload snip image from:', imgUrl)\n    this.isSnipPreload = true\n\n    const img: HTMLImageElement = new Image()\n    img.src = imgUrl\n    img.onload = () => {\n      console.log('preloaded sucessfully')\n      console.groupEnd()\n      this.isSnipPreload = true\n    }\n\n    img.onerror = () => {\n      console.log('preloaded met some error')\n      console.groupEnd()\n      this.isSnipPreload = false\n    }\n  }\n\n  private bootstrap(): void {\n    this.maskGroupMap = new Map()\n    this.setGroup(DEFAULT_MASK_GROUP, true)\n  }\n\n  private loadingEventFactory(groupName: string, status: LoadingStatus, data?: any): LoadingEvent {\n    return {\n      id: groupName,\n      status,\n      data\n    }\n  }\n\n  private maskGroupFactory(groupName: string): LoadingMaskGroup {\n    return {\n      uuid: this.uuid++,\n      id: groupName,\n      pending: 0,\n      done: 0,\n      isError: false,\n      instances: 0\n    }\n  }\n}\n",
    "export enum LoadingStatus {\n  INIT = '__init__',\n  PENDING = 'pending',\n  DONE = 'done',\n  ERROR = 'error'\n}\n\nexport interface LoadingEvent {\n  id: string,\n  status: LoadingStatus,\n  data?: any\n}\n",
    "import { InjectionToken } from '@angular/core'\nimport { Config } from './model/config'\n\nexport const DEFAULT_CONFIG: Config = {\n  snippet: {\n    imgUrl: null,\n    size: 144\n  },\n  mask: {\n    bgColor: 'rgba(255, 255, 255, .7)'\n  },\n  clsMapping: {\n    mask: 'ngx-loading-mask',\n    snip: 'ngx-loading-snip'\n  },\n  debug: false\n}\n\nexport const LOADING_MASK_HEADER = 'X-Loading-Mask'\n\nexport const DEFAULT_MASK_GROUP = 'default_mask_group'\n\nexport const CONFIG = new InjectionToken<Config>('ngx.loadingMask.config')\n"
  ],
  "names": [
    "empty",
    "of",
    "BehaviorSubject"
  ],
  "mappings": "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"
}
