{
  "version": 3,
  "file": "ngx-loading-mask.umd.js",
  "sources": [
    "ng://ngx-loading-mask/src/app/loading-mask/loading-mask.module.ts",
    "ng://ngx-loading-mask/src/app/loading-mask/loading-mask.interceptor.ts",
    "ng://ngx-loading-mask/src/app/loading-mask/loading-snip.component.ts",
    "ng://ngx-loading-mask/src/app/loading-mask/loading-mask.directive.ts",
    "ng://ngx-loading-mask/src/app/loading-mask/utils/log.ts",
    "ng://ngx-loading-mask/src/app/loading-mask/loading-mask.service.ts",
    "ng://ngx-loading-mask/src/app/loading-mask/model/event.ts",
    "ng://ngx-loading-mask/src/app/loading-mask/config.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { LoadingSnipComponent } from './loading-snip.component'\nimport { LoadingMaskDirective } from './loading-mask.directive'\nimport { Config } from './model/config'\nimport { CONFIG } from './config'\nimport { LoadingMaskService } from './loading-mask.service'\nimport { HTTP_INTERCEPTORS } from '@angular/common/http'\nimport { LoadingMaskInterceptor } from './loading-mask.interceptor'\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    LoadingSnipComponent,\n    LoadingMaskDirective\n  ],\n  exports: [\n    LoadingMaskDirective\n  ],\n  entryComponents: [\n    LoadingSnipComponent\n  ]\n})\nexport class LoadingMaskModule {\n  static forRoot(config: Config): ModuleWithProviders {\n    return {\n      ngModule: LoadingMaskModule,\n      providers: [\n        LoadingMaskService,\n        {\n          useValue: config,\n          provide: CONFIG\n        },\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: LoadingMaskInterceptor,\n          multi: true,\n        }\n      ]\n    }\n  }\n}\n",
    "import { Injectable } from '@angular/core'\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpResponse, HttpErrorResponse } from '@angular/common/http'\n\nimport { Observable } from 'rxjs/Observable'\nimport { LoadingMaskService } from './loading-mask.service'\nimport { tap } from 'rxjs/operators'\nimport { LOADING_MASK_HEADER } from './config'\n\n@Injectable()\nexport class LoadingMaskInterceptor implements HttpInterceptor {\n  constructor(\n    private service: LoadingMaskService\n  ) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (req.headers.has(LOADING_MASK_HEADER)) {\n      // TODO use custom header as custom metadata, maybe deprecated in the future\n      // refer to https://github.com/angular/angular/issues/18155\n      const groupName = req.headers.get(LOADING_MASK_HEADER)\n\n      req = req.clone({\n        headers: req.headers.delete(LOADING_MASK_HEADER)\n      })\n\n      this.service.showGroup(groupName)\n\n      return next.handle(req).pipe(\n        tap(event => {\n          if (event instanceof HttpResponse) {\n            // TODO hide mask here\n            this.service.hideGroup(groupName)\n          }\n        }, error => {\n          if (error instanceof HttpErrorResponse) {\n            // TODO hide mask with error here\n            this.service.hideGroupError(groupName, error)\n          }\n        })\n      )\n    } else {\n      return next.handle(req)\n    }\n  }\n}\n",
    "import { Component, OnInit, Inject, ViewEncapsulation } from '@angular/core'\nimport { ClsMapping, Config } from './model/config'\nimport { CONFIG, DEFAULT_CONFIG } from './config'\nimport { LoadingMaskDirective } from './loading-mask.directive'\n\n@Component({\n  selector: 'ngx-loading-snip',\n  encapsulation: ViewEncapsulation.None,\n  template: `<div class=\"loading-mask-base\" [ngClass]=\"maskCls\" [ngStyle]=\"maskStyle\">\n  <div class=\"loading-snip-base\" [ngClass]=\"snipCls\">\n    <img *ngIf=\"!mask.maskTplRef\" [attr.src]=\"imgUrl\" [ngStyle]=\"snipStyle\"/>\n    <ng-container *ngIf=\"mask.maskTplRef\">\n        <ng-container *ngTemplateOutlet=\"mask.maskTplRef\">\n        </ng-container>\n      </ng-container>\n  </div>\n</div>\n`,\n  styles: [`.loading-mask-base {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  z-index: 99; }\n  .loading-mask-base.global {\n    position: fixed;\n    width: 100vw;\n    height: 100vh; }\n\n.loading-snip-base {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%); }\n`]\n})\nexport class LoadingSnipComponent implements OnInit {\n  private cls: ClsMapping\n\n  imgUrl: string\n  size: number\n  bgColor: string\n\n  get maskCls() {\n    return [this.cls.mask, this.mask.isDefault ? 'global' : '']\n  }\n\n  get maskStyle() {\n    return {\n      'background': this.bgColor\n    }\n  }\n\n  get snipCls() {\n    return this.cls.snip\n  }\n\n  get snipStyle() {\n    return {\n      'width.px': this.size,\n      'height.px': this.size\n    }\n  }\n\n  constructor(\n    @Inject(CONFIG) private config: Config,\n    public mask: LoadingMaskDirective\n  ) { }\n\n  ngOnInit() {\n    this.config = Object.assign(DEFAULT_CONFIG, this.config)\n\n    this.cls = this.config.clsMapping\n    this.imgUrl = this.config.snippet.imgUrl\n    this.size = this.config.snippet.size\n    this.bgColor = this.config.mask.bgColor\n  }\n}\n",
    "import { Directive, Input, ComponentFactoryResolver, ApplicationRef, Injector, Host, ElementRef, Inject, ContentChild, TemplateRef } from '@angular/core'\nimport { LoadingMaskService } from './loading-mask.service'\nimport { OnInit, OnDestroy } from '@angular/core/src/metadata/lifecycle_hooks'\nimport { Subscription } from 'rxjs/Subscription'\nimport { Observable } from 'rxjs/Observable'\nimport { LoadingEvent, LoadingStatus } from './model/event'\nimport { LoadingMaskGroup } from './model/mask'\n\nimport { ComponentPortal, DomPortalHost } from '@angular/cdk/portal'\nimport { LoadingSnipComponent } from './loading-snip.component'\nimport { catchError, tap, flatMap } from 'rxjs/operators'\nimport { of } from 'rxjs/observable/of'\nimport { empty } from 'rxjs/observable/empty'\nimport { Config } from './model/config'\nimport { CONFIG, DEFAULT_CONFIG } from './config'\nimport { logGroupStatus } from './utils/log'\n\n@Directive({\n  selector: '[ngxLoadingMask]',\n  exportAs: 'mask'\n})\nexport class LoadingMaskDirective implements OnInit, OnDestroy {\n  @Input() public ngxLoadingMask: string\n  public isDefault = false\n  @ContentChild('mask') public maskTplRef: TemplateRef<any>\n\n  private loadingEvent$: Observable<LoadingEvent>\n  private subscription: Subscription\n  private group: LoadingMaskGroup\n\n  private loadingSnipPortal: ComponentPortal<LoadingSnipComponent>\n  private portalHost: DomPortalHost\n  private portalHostEl: HTMLElement\n\n  constructor(\n    @Inject(CONFIG) private config: Config,\n    private service: LoadingMaskService,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private appRef: ApplicationRef,\n    private injector: Injector,\n    @Host() private el: ElementRef\n  ) { }\n\n  ngOnInit() {\n    this.group = this.service.register(this.ngxLoadingMask)\n\n    this.config = Object.assign(DEFAULT_CONFIG, this.config)\n\n    this.service.preloadImage()\n\n    const { id } = this.group\n\n    this.isDefault = this.service.isDefaultGroup(id)\n    this.loadingEvent$ = this.service.subscribe(id)\n\n    this.loadingSnipPortal = new ComponentPortal(LoadingSnipComponent)\n    this.portalHostEl = this.service.isDefaultGroup(id) ? document.body : this.el.nativeElement\n\n    this.portalHost = new DomPortalHost(\n      this.portalHostEl,\n      this.componentFactoryResolver,\n      this.appRef,\n      this.injector)\n\n    this.subscription = this.loadingEvent$.pipe(\n      flatMap(e => {\n        return of(e).pipe(\n          tap(t => this.handleEvent(t)),\n          catchError((err, source) => {\n            console.error(err)\n            return empty()\n          })\n        )\n      }))\n      .subscribe()\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe()\n  }\n\n  private handleEvent(e: LoadingEvent) {\n    switch (e.status) {\n      case LoadingStatus.PENDING:\n        this.group.pending++\n        if (this.group.isError) this.group.isError = false\n\n        if (this.config.debug) {\n          logGroupStatus(this.group, LoadingStatus.PENDING)\n        }\n\n        if (this.portalHost.hasAttached()) return\n        else this.reveal()\n\n        break\n      case LoadingStatus.DONE:\n        this.group.done++\n\n        if (this.config.debug) {\n          logGroupStatus(this.group, LoadingStatus.DONE)\n        }\n\n        if (this.service.isDoneGroup(this.group)) {\n          this.group.done = 0\n          this.group.pending = 0\n\n          this.hide()\n        }\n\n        break\n      case LoadingStatus.ERROR:\n        this.group.done = 0\n        this.group.pending = 0\n\n        this.group.isError = true\n\n        if (this.config.debug) {\n          logGroupStatus(this.group, LoadingStatus.ERROR)\n        }\n\n        this.hideError(e.data)\n\n        break\n    }\n  }\n\n  reveal() {\n    // TODO track https://github.com/angular/material2/issues/8628\n    // this.portalHost.attachComponentPortal(this.loadingSnipPortal)\n    this.portalHost.attach(this.loadingSnipPortal)\n  }\n\n  hide() {\n    this.portalHost.detach()\n  }\n\n  hideError(error: any) {\n    this.hide()\n\n    throw new Error(error)\n  }\n}\n",
    "import { LoadingMaskGroup } from '../model/mask'\nimport { LoadingStatus } from '../model/event'\n\nexport const logGroupStatus = function (group: LoadingMaskGroup, status: LoadingStatus) {\n  console.group(`group %s is ${status}`, group.id)\n  console.log(group)\n  console.groupEnd()\n}\n",
    "import { Injectable, Inject } from '@angular/core'\nimport { LoadingMaskGroupMap, LoadingMaskGroup } from './model/mask'\n\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject'\nimport { LoadingEvent, LoadingStatus } from './model/event'\nimport { Observable } from 'rxjs/Observable'\nimport { filter } from 'rxjs/operators'\nimport { Config } from './model/config'\nimport { CONFIG, DEFAULT_MASK_GROUP } from './config'\n\n@Injectable()\nexport class LoadingMaskService {\n  private isSnipPreload = false\n  private uuid = 1\n  private maskGroupMap: LoadingMaskGroupMap\n\n  private loadingEvent$ = new BehaviorSubject<LoadingEvent>({\n    id: '__init__',\n    status: LoadingStatus.INIT\n  })\n\n  constructor(\n    @Inject(CONFIG) private config: Config\n  ) {\n    this.bootstrap()\n  }\n\n  subscribe(groupName?: string): Observable<LoadingEvent> {\n    if (!!groupName) {\n      return this.loadingEvent$.pipe(\n        filter(e => e.id === groupName)\n      )\n    } else {\n      return this.loadingEvent$.asObservable()\n    }\n  }\n\n  /*\n   * register group instance\n   */\n  register(groupName: string = DEFAULT_MASK_GROUP, replace = false): LoadingMaskGroup {\n    if (groupName.length === 0) {\n      groupName = DEFAULT_MASK_GROUP\n    }\n\n    let group: LoadingMaskGroup\n\n    if (this.isDefaultGroup(groupName)) {\n      group = this.getGroup(groupName, true)\n    } else {\n      group = this.setGroup(groupName, replace)\n    }\n\n    return group\n  }\n\n  /*\n   * unregister group instance\n   */\n  unregister(groupName: string): void {\n    if (this.isDefaultGroup(groupName)) {\n      throw new Error('cannot unregister default loading mask group')\n    }\n\n    if (!this.maskGroupMap.has(groupName)) {\n      throw new Error('cannot unregister non-existed loading mask group')\n    }\n\n    const group = this.getGroup(groupName)\n\n    group.instances--\n\n    if (group.instances === 0) {\n      this.maskGroupMap.delete(groupName)\n    }\n  }\n\n  /*\n   * if groupName is default group name\n   */\n  isDefaultGroup(groupName: string): boolean {\n    return groupName === DEFAULT_MASK_GROUP\n  }\n\n  /*\n   * if group has been done status\n   */\n  isDoneGroup(group: LoadingMaskGroup): boolean {\n    return group.done === group.pending\n  }\n\n  /*\n   * get group instance of groupName\n   * if don't existed and safe = true, set new group instance with groupName and return it\n   */\n  getGroup(groupName: string, safe = false): LoadingMaskGroup {\n    if (this.maskGroupMap.has(groupName)) {\n      return this.maskGroupMap.get(groupName)\n    } else {\n      if (safe) {\n        return this.setGroup(groupName)\n      }\n    }\n  }\n\n  /*\n   * set group instance of groupName\n   * if replace = false, will return exited group instance with corresponding groupName\n   * otherwise, will replace current group instance with new one\n   */\n  setGroup(groupName: string, replace = false): LoadingMaskGroup {\n    let group: LoadingMaskGroup\n\n    if (!replace && this.maskGroupMap.has(groupName)) {\n      group = this.getGroup(groupName)\n    } else {\n      group = this.maskGroupFactory(groupName)\n      this.maskGroupMap.set(groupName, group)\n    }\n\n    group.instances++\n\n    return group\n  }\n\n  showGroup(groupName: string = DEFAULT_MASK_GROUP) {\n    this.loadingEvent$.next(this.loadingEventFactory(groupName, LoadingStatus.PENDING))\n  }\n\n  hideGroup(groupName: string = DEFAULT_MASK_GROUP) {\n    this.loadingEvent$.next(this.loadingEventFactory(groupName, LoadingStatus.DONE))\n  }\n\n  hideGroupError(groupName: string = DEFAULT_MASK_GROUP, error: any) {\n    this.loadingEvent$.next(this.loadingEventFactory(groupName, LoadingStatus.ERROR, error))\n  }\n\n  preloadImage() {\n    if (this.isSnipPreload) return\n\n    const { snippet: { imgUrl } } = this.config\n\n    console.group('starting preload snip image from:', imgUrl)\n    this.isSnipPreload = true\n\n    const img: HTMLImageElement = new Image()\n    img.src = imgUrl\n    img.onload = () => {\n      console.log('preloaded sucessfully')\n      console.groupEnd()\n      this.isSnipPreload = true\n    }\n\n    img.onerror = () => {\n      console.log('preloaded met some error')\n      console.groupEnd()\n      this.isSnipPreload = false\n    }\n  }\n\n  private bootstrap(): void {\n    this.maskGroupMap = new Map()\n    this.setGroup(DEFAULT_MASK_GROUP, true)\n  }\n\n  private loadingEventFactory(groupName: string, status: LoadingStatus, data?: any): LoadingEvent {\n    return {\n      id: groupName,\n      status,\n      data\n    }\n  }\n\n  private maskGroupFactory(groupName: string): LoadingMaskGroup {\n    return {\n      uuid: this.uuid++,\n      id: groupName,\n      pending: 0,\n      done: 0,\n      isError: false,\n      instances: 0\n    }\n  }\n}\n",
    "export enum LoadingStatus {\n  INIT = '__init__',\n  PENDING = 'pending',\n  DONE = 'done',\n  ERROR = 'error'\n}\n\nexport interface LoadingEvent {\n  id: string,\n  status: LoadingStatus,\n  data?: any\n}\n",
    "import { InjectionToken } from '@angular/core'\nimport { Config } from './model/config'\n\nexport const DEFAULT_CONFIG: Config = {\n  snippet: {\n    imgUrl: null,\n    size: 144\n  },\n  mask: {\n    bgColor: 'rgba(255, 255, 255, .7)'\n  },\n  clsMapping: {\n    mask: 'ngx-loading-mask',\n    snip: 'ngx-loading-snip'\n  },\n  debug: false\n}\n\nexport const LOADING_MASK_HEADER = 'X-Loading-Mask'\n\nexport const DEFAULT_MASK_GROUP = 'default_mask_group'\n\nexport const CONFIG = new InjectionToken<Config>('ngx.loadingMask.config')\n"
  ],
  "names": [
    "CommonModule",
    "NgModule",
    "HTTP_INTERCEPTORS",
    "Injectable",
    "HttpErrorResponse",
    "HttpResponse",
    "tap",
    "ApplicationRef",
    "ComponentFactoryResolver",
    "of$1",
    "catchError",
    "flatMap",
    "DomPortalHost",
    "ComponentPortal",
    "BehaviorSubject$1",
    "InjectionToken"
  ],
  "mappings": "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"
}
